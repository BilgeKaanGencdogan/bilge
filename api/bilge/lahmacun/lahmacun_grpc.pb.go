// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: bilge/lahmacun/lahmacun.proto

package lahmacun

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LahmacunService_GetLahmacun_FullMethodName    = "/bilge.lahmacun.LahmacunService/GetLahmacun"
	LahmacunService_CreateLahmacun_FullMethodName = "/bilge.lahmacun.LahmacunService/CreateLahmacun"
	LahmacunService_UpdateLahmacun_FullMethodName = "/bilge.lahmacun.LahmacunService/UpdateLahmacun"
)

// LahmacunServiceClient is the client API for LahmacunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LahmacunServiceClient interface {
	GetLahmacun(ctx context.Context, in *QueryLahmacunRequest, opts ...grpc.CallOption) (*QueryLahmacunResponse, error)
	CreateLahmacun(ctx context.Context, in *MsgCreateLahmacun, opts ...grpc.CallOption) (*MsgCreateLahmacunResponse, error)
	UpdateLahmacun(ctx context.Context, in *MsgUpdateLahmacun, opts ...grpc.CallOption) (*MsgUpdateLahmacunResponse, error)
}

type lahmacunServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLahmacunServiceClient(cc grpc.ClientConnInterface) LahmacunServiceClient {
	return &lahmacunServiceClient{cc}
}

func (c *lahmacunServiceClient) GetLahmacun(ctx context.Context, in *QueryLahmacunRequest, opts ...grpc.CallOption) (*QueryLahmacunResponse, error) {
	out := new(QueryLahmacunResponse)
	err := c.cc.Invoke(ctx, LahmacunService_GetLahmacun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lahmacunServiceClient) CreateLahmacun(ctx context.Context, in *MsgCreateLahmacun, opts ...grpc.CallOption) (*MsgCreateLahmacunResponse, error) {
	out := new(MsgCreateLahmacunResponse)
	err := c.cc.Invoke(ctx, LahmacunService_CreateLahmacun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lahmacunServiceClient) UpdateLahmacun(ctx context.Context, in *MsgUpdateLahmacun, opts ...grpc.CallOption) (*MsgUpdateLahmacunResponse, error) {
	out := new(MsgUpdateLahmacunResponse)
	err := c.cc.Invoke(ctx, LahmacunService_UpdateLahmacun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LahmacunServiceServer is the server API for LahmacunService service.
// All implementations must embed UnimplementedLahmacunServiceServer
// for forward compatibility
type LahmacunServiceServer interface {
	GetLahmacun(context.Context, *QueryLahmacunRequest) (*QueryLahmacunResponse, error)
	CreateLahmacun(context.Context, *MsgCreateLahmacun) (*MsgCreateLahmacunResponse, error)
	UpdateLahmacun(context.Context, *MsgUpdateLahmacun) (*MsgUpdateLahmacunResponse, error)
	mustEmbedUnimplementedLahmacunServiceServer()
}

// UnimplementedLahmacunServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLahmacunServiceServer struct {
}

func (UnimplementedLahmacunServiceServer) GetLahmacun(context.Context, *QueryLahmacunRequest) (*QueryLahmacunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLahmacun not implemented")
}
func (UnimplementedLahmacunServiceServer) CreateLahmacun(context.Context, *MsgCreateLahmacun) (*MsgCreateLahmacunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLahmacun not implemented")
}
func (UnimplementedLahmacunServiceServer) UpdateLahmacun(context.Context, *MsgUpdateLahmacun) (*MsgUpdateLahmacunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLahmacun not implemented")
}
func (UnimplementedLahmacunServiceServer) mustEmbedUnimplementedLahmacunServiceServer() {}

// UnsafeLahmacunServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LahmacunServiceServer will
// result in compilation errors.
type UnsafeLahmacunServiceServer interface {
	mustEmbedUnimplementedLahmacunServiceServer()
}

func RegisterLahmacunServiceServer(s grpc.ServiceRegistrar, srv LahmacunServiceServer) {
	s.RegisterService(&LahmacunService_ServiceDesc, srv)
}

func _LahmacunService_GetLahmacun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLahmacunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LahmacunServiceServer).GetLahmacun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LahmacunService_GetLahmacun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LahmacunServiceServer).GetLahmacun(ctx, req.(*QueryLahmacunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LahmacunService_CreateLahmacun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateLahmacun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LahmacunServiceServer).CreateLahmacun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LahmacunService_CreateLahmacun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LahmacunServiceServer).CreateLahmacun(ctx, req.(*MsgCreateLahmacun))
	}
	return interceptor(ctx, in, info, handler)
}

func _LahmacunService_UpdateLahmacun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateLahmacun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LahmacunServiceServer).UpdateLahmacun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LahmacunService_UpdateLahmacun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LahmacunServiceServer).UpdateLahmacun(ctx, req.(*MsgUpdateLahmacun))
	}
	return interceptor(ctx, in, info, handler)
}

// LahmacunService_ServiceDesc is the grpc.ServiceDesc for LahmacunService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LahmacunService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bilge.lahmacun.LahmacunService",
	HandlerType: (*LahmacunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLahmacun",
			Handler:    _LahmacunService_GetLahmacun_Handler,
		},
		{
			MethodName: "CreateLahmacun",
			Handler:    _LahmacunService_CreateLahmacun_Handler,
		},
		{
			MethodName: "UpdateLahmacun",
			Handler:    _LahmacunService_UpdateLahmacun_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bilge/lahmacun/lahmacun.proto",
}
